{"version":3,"sources":["components/Main/Main.jsx","components/Form/SignIn.jsx","components/Form/SignUp.jsx","App.jsx","index.js"],"names":["Main","user","JSON","parse","localStorage","getItem","name","SignIn","state","isLogin","isPasswordHidden","passwordVisibility","email","password","isValid","togglePasswordVisibility","setState","prevState","handleChange","event","target","value","handleSubmit","preventDefault","closeError","this","className","onSubmit","htmlFor","type","id","onChange","placeholder","onClick","src","alt","disabled","props","signUp","Component","SignUp","isConfirmPasswordHidden","confirmPasswordVisibility","isRegistered","toggleConfirmPasswordVisibility","validationsShema","yup","shape","required","min","matches","confirmPassword","oneOf","initialValues","validateOnBlur","values","setItem","stringify","validationSchema","errors","touched","handleBlur","dirty","onBlur","tooltip","signIn","App","isEnterScreen","isSignUp","isSignIn","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3645be13.chunk.js","sourcesContent":["import React from 'react';\n\nconst Main = () => {\n  const user = JSON.parse(localStorage.getItem('user'));\n\n  return (\n      <h1>{`Hello, ${user.name}!`}</h1>\n  );\n}\n\nexport default Main;\n","import React, { Component } from 'react';\nimport './Form.scss';\nimport Main from '../Main/Main';\n\nclass SignIn extends Component {\n  state = {\n    isLogin: false,\n    isPasswordHidden: true,\n    passwordVisibility: 'password',\n    email: '',\n    password: '',\n    isValid: true,\n  }\n\n  togglePasswordVisibility = () => {\n    this.setState((prevState) => ({\n      isPasswordHidden: !prevState.isPasswordHidden,\n      passwordVisibility: prevState.passwordVisibility === 'password'\n        ? 'text'\n        : 'password',\n    }))\n  }\n\n  handleChange = (event) => {\n    this.setState({ \n      [event.target.name]: event.target.value,\n      isValid: true\n    });\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    const user = JSON.parse(localStorage.getItem('user'));\n\n    if (user.email === this.state.email && user.password === this.state.password) {\n      this.setState({isLogin: true});\n    } else {\n      this.setState({\n        isValid: false,\n        email: '',\n        password: '',\n      });\n    }\n  }\n\n  closeError = () => this.setState({isValid: true});\n\n  render() {\n    return (\n      <>\n        { !this.state.isLogin &&\n          <div className=\"form-wrapper\">\n            <div className=\"title\">Sign In</div>\n            <form className=\"form\" onSubmit={this.handleSubmit}>\n              <div className=\"form-field\">\n                <label htmlFor=\"email\">Email</label>\n                <input\n                  type=\"text\"\n                  id=\"email\"\n                  className={`${!this.state.isValid ? 'error-input' : ''}`}\n                  name=\"email\"\n                  value={this.state.email}\n                  onChange={this.handleChange}\n                  placeholder=\"email@example.com\"\n                />\n              </div>\n              <div className=\"form-field\">\n                <label htmlFor=\"password\">Password</label>\n                <input\n                  type={this.state.passwordVisibility}\n                  className={`${!this.state.isValid ? 'error-input' : ''}`}\n                  id=\"password\"\n                  name=\"password\"\n                  value={this.state.password}\n                  onChange={this.handleChange}\n                  placeholder=\"Password\"\n                />\n                {\n                  this.state.isPasswordHidden\n                    ? <button\n                        type=\"button\"\n                        className=\"togglePass\"\n                        onClick={this.togglePasswordVisibility}\n                      >\n                        <img src=\"./img/show.svg\" alt=\"Show password\" />\n                      </button>\n                    : <button\n                        type=\"button\"\n                        className=\"togglePass togglePass-position\"\n                        onClick={this.togglePasswordVisibility}\n                      >\n                        <img src=\"./img/hidden.svg\" alt=\"Hidden password\" />\n                      </button>\n                }\n              </div>\n              <button\n                type=\"submit\"\n                className=\"submit-btn\"\n                disabled={!this.state.email || !this.state.password}\n              >\n                Sign In\n              </button>\n            </form>\n            <div className=\"text-after-form\">\n              Don’t have an account yet?<br />\n              <button className=\"link-btn\" onClick={this.props.signUp}>\n                <span className=\"link\">Sign Up</span>\n              </button>\n            </div>\n            {!this.state.isValid && \n              <div className=\"error-box\" onClick={this.closeError}>\n                <span>Wrong email or password</span>\n                <button type=\"button\">X</button>\n              </div>\n            }\n          </div>\n        }\n        {this.state.isLogin && <Main />}\n     </>\n    );\n  }\n}\n\nexport default SignIn;\n","import React, { Component } from 'react';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport './Form.scss';\nimport Main from '../Main/Main';\n\nclass SignUp extends Component {\n  state = {\n    isPasswordHidden: true,\n    isConfirmPasswordHidden: true,\n    passwordVisibility: 'password',\n    confirmPasswordVisibility: 'password',\n    isRegistered: false,\n  }\n\n  togglePasswordVisibility = () => {\n    this.setState((prevState) => ({\n      isPasswordHidden: !prevState.isPasswordHidden,\n      passwordVisibility: prevState.passwordVisibility === 'password'\n        ? 'text'\n        : 'password',\n    }))\n  }\n\n  toggleConfirmPasswordVisibility = () => {\n    this.setState((prevState) => ({\n      isConfirmPasswordHidden: !prevState.isConfirmPasswordHidden,\n      confirmPasswordVisibility: prevState.confirmPasswordVisibility === 'password'\n        ? 'text'\n        : 'password',\n    }))\n  }\n\n  validationsShema = yup.object().shape({\n    name: yup.string().required('This field is required.'),\n    email: yup.string().email('Enter valid email.').required('This field is required.'),\n    password: yup.string().required('This field is required.')\n      .min(8, 'Password should be 8 chars minimum.')\n      .matches(\n        /^(?=(?:.*?[A-Z]){2})(?=.*?[#?!@$%^&*-]).{8,}$/,\n        'Must be 2 uppercase and 1 special char.'\n      ),\n    confirmPassword: yup.string()\n      .oneOf([yup.ref('password')], 'Password do not match')\n      .required('This field is required.'),\n  });\n\n  render() {\n  \n    return (\n      <>\n        {\n          !this.state.isRegistered &&\n          <div className=\"form-wrapper\">\n            <div className=\"title\">Sign Up</div>\n            <Formik\n              initialValues={{\n                name: '',\n                email: '',\n                password: '',\n                confirmPassword: '',\n              }}\n              validateOnBlur\n              onSubmit={values => {\n                  localStorage.setItem('user', JSON.stringify(values));\n                  this.setState({isRegistered: true});\n                }\n              }\n              validationSchema={this.validationsShema}\n            >\n              {({ values, errors, touched, handleChange, handleBlur, isValid, handleSubmit, dirty }) => (\n                <div className=\"form\">\n                  <div className=\"form-field\">\n                    <label htmlFor=\"name\">Full name</label>\n                    <input\n                      type=\"text\"\n                      className={`${touched.name && errors.name ? 'error-input' : ''}`}\n                      id=\"name\"\n                      name=\"name\"\n                      value={values.name}\n                      onChange={handleChange}\n                      onBlur={handleBlur}\n                      placeholder=\"Full name\"\n                    />\n                    {touched.name && errors.name && <span className=\"error\">{errors.name}</span>}\n                  </div> \n                  <div className=\"form-field\">\n                    <label htmlFor=\"email\">Email</label>\n                    <input\n                      type=\"text\"\n                      className={`${touched.email && errors.email ? 'error-input' : ''}`}\n                      id=\"email\"\n                      name=\"email\"\n                      value={values.email}\n                      onChange={handleChange}\n                      onBlur={handleBlur}\n                      placeholder=\"email@example.com\"\n                    />\n                    {touched.email && errors.email && <span className=\"error\">{errors.email}</span>}\n                  </div>\n                  <div className=\"form-field\">\n                    <div className=\"password\">\n                      <label htmlFor=\"password\">Password</label>\n                      <img\n                          className=\"tooltip\"\n                          src=\"./img/Vector.svg\"\n                          alt=\"Tooltip icon\"\n                          tooltip=\"простая подсказка\"\n                        />\n                    </div>\n                    <input\n                      type={this.state.passwordVisibility}\n                      id=\"password\"\n                      className={`${touched.password && errors.password ? 'error-input' : ''}`}\n                      name=\"password\"\n                      value={values.password}\n                      onChange={handleChange}\n                      onBlur={handleBlur}\n                      placeholder=\"Password\"\n                    />\n                    {\n                      touched.password\n                      && errors.password\n                      && <span className=\"error\">{errors.password}</span>\n                    }\n                    {\n                      this.state.isPasswordHidden\n                        ? <button\n                            type=\"button\"\n                            className=\"togglePass\"\n                            onClick={this.togglePasswordVisibility}\n                          >\n                            <img src=\"./img/show.svg\" alt=\"Show password\" />\n                          </button>\n                        : <button\n                            type=\"button\"\n                            className=\"togglePass togglePass-position\"\n                            onClick={this.togglePasswordVisibility}\n                          >\n                            <img src=\"./img/hidden.svg\" alt=\"Hidden password\" />\n                          </button>\n                    }\n                  </div>\n                  <div className=\"form-field\">\n                    <label htmlFor=\"confirmPassword\">Repeat password</label>\n                    <input\n                      type={this.state.confirmPasswordVisibility}\n                      id=\"confirmPassword\"\n                      className={`${touched.confirmPassword && errors.confirmPassword ? 'error-input' : ''}`}\n                      name=\"confirmPassword\"\n                      value={values.confirmPassword}\n                      onChange={handleChange}\n                      onBlur={handleBlur}\n                      placeholder=\"Confirm password\"\n                    />\n                    {\n                      touched.confirmPassword\n                      && errors.confirmPassword\n                      && <span className=\"error\">{errors.confirmPassword}</span>\n                    }\n                    {\n                      this.state.isConfirmPasswordHidden\n                        ? <button\n                            type=\"button\"\n                            className=\"togglePass\"\n                            onClick={this.toggleConfirmPasswordVisibility}\n                          >\n                            <img src=\"./img/show.svg\" alt=\"Show password\" />\n                          </button>\n                        : <button\n                            type=\"button\"\n                            className=\"togglePass togglePass-position\"\n                            onClick={this.toggleConfirmPasswordVisibility}\n                          >\n                            <img src=\"./img/hidden.svg\" alt=\"Hidden password\" />\n                          </button>\n                    }\n                    \n                  </div>\n                  <button\n                    disabled={!isValid && !dirty}\n                    type=\"submit\"\n                    onClick={handleSubmit}\n                    className=\"submit-btn\"\n                  >\n                    Sign Up\n                  </button>\n                </div>\n              )}\n            </Formik>\n            <div className=\"text-after-form\">\n              Already have an account?<br />\n              <button className=\"link-btn\" onClick={this.props.signIn}>\n                <span className=\"link\">Sign In</span>\n              </button>\n            </div> \n          </div>\n        }\n        {\n          this.state.isRegistered &&\n          <Main />\n        }\n      </>\n    );\n  }\n}\n\nexport default SignUp;\n","import React, { Component } from 'react';\nimport './App.scss';\nimport SignIn from './components/Form/SignIn';\nimport SignUp from './components/Form/SignUp';\n\nclass App extends Component {\n  state = {\n    isEnterScreen: true,\n    isSignUp: false,\n    isSignIn: false,\n  }\n\n  signUp = () => {\n    this.setState({\n      isEnterScreen: false,\n      isSignUp: true,\n      isSignIn: false,\n    })\n  }\n\n  signIn = () => {\n    this.setState({\n      isEnterScreen: false,\n      isSignUp: false,\n      isSignIn: true,\n    })\n  }\n  \n  render() {\n    return (\n      <div className=\"App\">\n        {this.state.isEnterScreen\n          ? <div className=\"home\">\n              <h1 className=\"title\">Ready for a great User experience?</h1>\n              <p className=\"home__text\">Bring your media to the next level!</p>\n              <div className=\"home__buttons\">\n                <button\n                  type=\"button\"\n                  className=\"home__register\"\n                  onClick={this.signUp}\n                >\n                  Sign Up\n                </button>\n                <button\n                  type=\"button\"\n                  className=\"home__login\"\n                  onClick={this.signIn}\n                >\n                  →\n                </button>\n              </div>\n            </div>\n          : null\n        }\n        {this.state.isSignIn ? <SignIn signUp={this.signUp} /> : null}\n        {this.state.isSignUp ? <SignUp signIn={this.signIn} /> : null}\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}